library(dplyr)
library(visdat)
library(caret)
library(RANN)
library(corrplot)
library(plotly)
library(ggplot2)
library(resample)
library(DataExplorer)
library(imputeMulti)
library(mice)
library(rmarkdown)
library(repr)
library(tidyverse)
library(flextable)
library(imbalance)
library(dplyr)
library(visdat)
library(caret)
library(RANN)
library(corrplot)
library(plotly)
library(ggplot2)
library(resample)
library(DataExplorer)
library(imputeMulti)
library(mice)
library(rmarkdown)
library(repr)
library(tidyverse)
library(flextable)
library(imbalance)
library(cowplot)
df <- read.table("hepatitis.data", sep = ",")
colnames(df) <- c("Class","Age","Sex","Steroid","Antivirals","Fatigue","Malaise","Anorexia","LiverBig","LiverFirm","SpleenPalpable","Spiders","Ascites","Varices","Bilirubin","AlkPhosphate","Sgot","Albumin","Protime","Histology") # nolint
# attach(df)
head(df)
df[df == "?"] <- NA
df <- mutate_all(df, function(x) as.numeric(as.character(x)))
categorical <- c(1, 3:14, 20)
df[, categorical] <- replace(df[, categorical], df[, categorical] == 2, 0)
df[, categorical] <-  lapply(df[, categorical], as.factor)
plot_missing(df)
is.na(df)) != 0) # we cannot remove these rows!
sum(rowSums(is.na(df)) != 0) # we cannot remove these rows!
sum(is.na(df))
vis_dat(df)
md.pattern(df)
df.new <- mutate_all(df, function(x) as.numeric(as.character(x)))
data_transform <- preProcess(df.new, method = "knnImpute")
data_transform2 <- preProcess(df.new, method = "bagImpute")
data_transform3 <- preProcess(df.new, method = "medianImpute")
df2 <- predict(data_transform2, df.new)
df3 <- predict(data_transform3, df.new)
df1 <- predict(data_transform, df.new)
df2 <- predict(data_transform2, df.new)
df3 <- predict(data_transform3, df.new)
df1.standarized <- df1
methods = c(" "," "," ","logreg"," ","logreg","logreg","logreg","logreg","logreg","logreg","logreg","logreg","logreg","pmm","pmm","pmm","pmm","pmm"," ")
imp_single <- mice(df, m = 1, method = methods) # Impute missing values
df4 <- complete(imp_single)         # Store imputed data
imp_multi <- mice(df, method = methods)  # Impute missing values multiple times
df5 <- complete(imp_multi, 1)
```{r}
df1.standarized <- df1
df2[c(4:14, 16:17, 19)] <- round(df2[c(4:14, 16:17, 19)])
df3[c(4:14, 16:17, 19)] <- round(df3[c(4:14, 16:17, 19)])
```
df1.standarized <- df1
df2[c(4:14, 16:17, 19)] <- round(df2[c(4:14, 16:17, 19)])
df3[c(4:14, 16:17, 19)] <- round(df3[c(4:14, 16:17, 19)])
unstandarize <- function(data){
for (i in 1:20) {
column <- df.new[, i]
if (i %in% c(15, 18)) {
data[, i] <- data[, i] * sd(na.omit(column)) + mean(na.omit(column))
} else {
data[, i] <- round(data[, i] * sd(na.omit(column)) + mean(na.omit(column)))
}
}
return(data)
}
df1 <- unstandarize(df1)
unstandarize <- function(data){
for (i in 1:20) {
column <- df.new[, i]
if (i %in% c(15, 18)) {
data[, i] <- data[, i] * sd(na.omit(column)) + mean(na.omit(column))
} else {
data[, i] <- round(data[, i] * sd(na.omit(column)) + mean(na.omit(column)))
}
}
return(data)
}
df1.standarized <- df1
df2[c(4:14, 16:17, 19)] <- round(df2[c(4:14, 16:17, 19)])
df3[c(4:14, 16:17, 19)] <- round(df3[c(4:14, 16:17, 19)])
df1 <- unstandarize(df1)
methods = c(" ", " ", " ", "logreg", " ", "logreg", "logreg", "logreg", "logreg", "logreg", "logreg", "logreg", "logreg", "logreg", "pmm", "pmm", "pmm", "pmm", "pmm", " ")
imp_single <- mice(df, m = 1, method = methods) # Impute missing values
df4 <- complete(imp_single)         # Store imputed data
imp_multi <- mice(df, method = methods)  # Impute missing values multiple times
df5 <- complete(imp_multi, 1)
df$method <-  c(rep("omit", nrow(df)))
df1$method <- c(rep("knn", nrow(df1)))
df2$method <- c(rep("bag tree", nrow(df2)))
df3$method <- c(rep("median", nrow(df3)))
df5$method <- c(rep("mice", nrow(df5)))
df_all <- rbind(df, df1, df2, df3, df5)
df_all$method <- as.factor(df_all$method)
ggplot(df_all, aes(x = Protime, color = method)) +
scale_fill_brewer(palette = "Set2") +
geom_density(size = 1.25) +
facet_grid(Class ~ .)
Below we present basic statistics for continuous variables for various types of missing data substitutions. The statics are not significantly different. However, density functions must also be taken into account. They will tell us more about distribution.
stats1 <- df_all %>%
group_by(method) %>%
summarize(stat_min = round(min(na.omit(Age)),2),
stat_q1 = round(quantile(na.omit(Age), 0.25),2),
stat_median = round(median(na.omit(Age)),2),
stat_mean = round(mean(na.omit(Age)),2),
stat_q3 = round(quantile(na.omit(Age), 0.75),2),
stat_max = round(max(na.omit(Age)),2),
stat_std = round(sd(na.omit(Age)),2))
stats1$col <- "Age"
stats2 <- df_all %>%
group_by(method) %>%
summarize(stat_min = round(min(na.omit(Bilirubin)),2),
stat_q1 = round(quantile(na.omit(Bilirubin), 0.25),2),
stat_median = round(median(na.omit(Bilirubin)),2),
stat_mean = round(mean(na.omit(Bilirubin)),2),
stat_q3 = round(quantile(na.omit(Bilirubin), 0.75),2),
stat_max = round(max(na.omit(Bilirubin)),2),
stat_std = round(sd(na.omit(Bilirubin)),2))
stats2$col <- "Bilirubin"
stats3 <- df_all %>%
group_by(method) %>%
summarize(stat_min = round(min(na.omit(AlkPhosphate)),2),
stat_q1 = round(quantile(na.omit(AlkPhosphate), 0.25),2),
stat_median = round(median(na.omit(AlkPhosphate)),2),
stat_mean = round(mean(na.omit(AlkPhosphate)),2),
stat_q3 = round(quantile(na.omit(AlkPhosphate), 0.75),2),
stat_max = round(max(na.omit(AlkPhosphate)),2),
stat_std = round(sd(na.omit(AlkPhosphate)),2))
stats3$col <- "AlkPhosphate"
stats4 <- df_all %>%
group_by(method) %>%
summarize(stat_min = round(min(na.omit(Sgot)),2),
stat_q1 = round(quantile(na.omit(Sgot), 0.25),2),
stat_median = round(median(na.omit(Sgot)),2),
stat_mean = round(mean(na.omit(Sgot)),2),
stat_q3 = round(quantile(na.omit(Sgot), 0.75),2),
stat_max = round(max(na.omit(Sgot)),2),
stat_std = round(sd(na.omit(Sgot)),2))
stats4$col <- "Sgot"
stats5 <- df_all %>%
group_by(method) %>%
summarize(stat_min = round(min(na.omit(Albumin)),2),
stat_q1 = round(quantile(na.omit(Albumin), 0.25),2),
stat_median = round(median(na.omit(Albumin)),2),
stat_mean = round(mean(na.omit(Albumin)),2),
stat_q3 = round(quantile(na.omit(Albumin), 0.75),2),
stat_max = round(max(na.omit(Albumin)),2),
stat_std = round(sd(na.omit(Albumin)),2))
stats5$col <- "Albumin"
stats6 <- df_all %>%
group_by(method) %>%
summarize(stat_min = round(min(na.omit(Protime)),2),
stat_q1 = round(quantile(na.omit(Protime), 0.25),2),
stat_median = round(median(na.omit(Protime)),2),
stat_mean = round(mean(na.omit(Protime)),2),
stat_q3 = round(quantile(na.omit(Protime), 0.75),2),
stat_max = round(max(na.omit(Protime)),2),
stat_std = round(sd(na.omit(Protime)),2))
stats6$col <- "Protime"
all_stats <- bind_rows(stats1, stats2, stats3, stats4, stats5, stats6)
plot_bar(na.omit(df_all), by = "method", by_position = "dodge")
df1[, categorical] <-  lapply(df1[, categorical], as.factor)
plot_bar(na.omit(df1[-21]), by = "Class", by_position = "dodge")
plot_boxplot(df1, by = "Class")
cor_matrix <- cor(df1[, sapply(df1, is.numeric)], method = "pearson")
corrplot(cor_matrix, tl.col = "black", addCoef.col = 1, number.cex = 0.9)
```
p1 <- ggplot(df1, aes(x=Albumin, y=Bilirubin,color=Class)) + geom_point(size=3)
p2 <- ggplot(df1, aes(x=Albumin, y=AlkPhosphate,color=Class)) + geom_point(size=3)
p3 <- ggplot(df1, aes(x=Albumin, y=Protime,color=Class)) + geom_point(size=3)
p4 <- ggplot(df1, aes(x=Bilirubin, y=Protime,color=Class)) + geom_point(size=3)
plot_grid(p1, p2, p3, p4, labels = "AUTO")
